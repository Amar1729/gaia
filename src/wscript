#!/usr/bin/env python
# encoding: utf-8

import os, os.path

def options(opt):
    opt.add_option('--with-stlfacade', action='store_true',
                   dest = 'with_stlfacade', default = False,
                   help = 'whether or not to compile the STL facade inside the Gaia library')

    opt.add_option('--with-tests', action='store_true',
                   dest = 'with_tests', default = False,
                   help = 'whether ot not to compile the C++ tests inside the test directory')

    opt.recurse('bindings')


def configure(conf):
    conf.env['WITH_STLFACADE'] = conf.options.with_stlfacade
    conf.env['WITH_TESTS'] = conf.options.with_tests
    conf.recurse('bindings')

def install_tree(bld, dst, src):
    src = os.path.normpath(src)

    for root, dirs, files in os.walk(src):
        relroot = root[len(src)+1:]

        for f in files:
            bld.install_files(os.path.join(dst, relroot),
                              os.path.join(root, f))

def build_library(bld):
    sources =  bld.path.ant_glob('*.cpp')
    sources += bld.path.ant_glob('algorithms/*.cpp')
    sources += bld.path.ant_glob('metrics/*.cpp')
    sources += bld.path.ant_glob('3rdparty/alglib/*.cpp')
    sources += bld.path.ant_glob('3rdparty/libsvm/*.cpp')
    sources += bld.path.ant_glob('parser/*.cpp')

    if bld.env['WITH_STLFACADE']:
        sources += bld.path.ant_glob('stlfacade/*.cpp')

    gaialib = bld.stlib(
        source   = sources,
        target   = 'gaia2',
        use      = bld.env['USELIB'],
        install_path = '${PREFIX}/lib',
        includes = [ '.', 'metrics', '3rdparty' ]
    )

    def write_pcfile(task):
        open('../build/gaia2.pc', 'w').write(bld.env.pcfile)

    bld(rule=write_pcfile,  name='write_pcfile', target='../gaia2.pc')
    bld.add_group()

    if bld.env['WITH_STLFACADE']:
        bld.install_files('${PREFIX}/include/gaia2', bld.path.ant_glob('stlfacade/*.h'))
        bld.install_files('${PREFIX}/include/gaia2', 'baseexception.h')
    else:
        # we shouldn't redistribute these headers (they contain Qt code)
        bld.install_files('${PREFIX}/include/gaia2', bld.path.ant_glob('*.h'))
        bld.install_files('${PREFIX}/include/gaia2', [ 'algorithms/analyzer.h',
                                                       'algorithms/applier.h' ])
        bld.install_files('${PREFIX}/include/gaia2', [ 'metrics/distancefunction.h',
                                                       'metrics/layoutawarefactory.h',
                                                       'metrics/frozendistance.h' ])
        bld.install_files('${PREFIX}/include/gaia2/parser', [ 'parser/filter.h',
                                                              'parser/parsertypes.h',
                                                              'parser/grammar.h' ])

    import os
    os.chdir('src')

    bld.install_files('${PREFIX}/lib/pkgconfig', '../build/gaia2.pc')
    bld.install_files('${PREFIX}/lib', 'libgaia2.a')


def is_dev_version(bld):
    return '-dev' in bld.env.APP_VERSION


def build_tools(bld):
    # merge utility
    bld.program(
        source = 'tools/gaiamerge.cpp',
        target = 'tools/gaiamerge',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])

    # info utility
    bld.program(
        source = 'tools/gaiainfo.cpp',
        target = 'tools/gaiainfo',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])

    # GaiaFusion
    bld.install_as('${PREFIX}/bin/gaiafusion', 'tools/gaiafusion.py', chmod=0o755)

    # gaiafreeze utility
    bld.program(
        source = 'tools/gaiafreeze.cpp',
        target = 'tools/gaiafreeze',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])

    if is_dev_version(bld):
        # Note: we don't want to build this with a released version, because
        # otherwise rpm insists on including it also in the distributed binary
        # gaiabench utility
        bld.program(
            source = 'tools/gaiabench.cpp tools/frozensearch.cpp',
            target = 'tools/gaiabench',
            includes = [ '.', 'metrics', '3rdparty' ],
            use = ['gaia2'] + bld.env['USELIB'])


def build(bld):
    build_library(bld)
    build_tools(bld)

    if bld.env['WITH_TESTS']:
        bld.recurse('test')

    if bld.env['WITH_PYTHON_BINDINGS']:
        bld.recurse('bindings')

